# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore AWS credentials
*.pem
*.key
*.cer
*.crt

# AWS-specific files (e.g., credentials)
.aws/
*.env

# Ignore temporary or log files
*.log
*.tmp
*.bak
*.swp
*.DS_Store
.idea/
.vscode/
node_modules/
coverage/
dist/
build/

# Ignore Python virtual environments (if using cfn-lint)
.venv/
env/
venv/
__pycache__/
*.pyc
*.pyo
Pipfile.lock
poetry.lock

# Terraform related files (if using alongside CloudFormation)
.terraform/
terraform.tfstate
terraform.tfstate.backup
*.tfvars
*.tfstate*
*.backup

# Ignore YAML/JSON validation output if generated
*.output.yaml
*.output.json

# Ignore deployment artifacts
*.zip
*.tar.gz
.cloudformation/deployments/

# Ignore S3 files used for deployment packaging
.packaged.yaml
